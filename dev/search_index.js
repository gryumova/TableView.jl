var documenterSearchIndex = {"docs":
[{"location":"pages/generate_html/#Generating-HTML-file","page":"Generate HTML","title":"Generating HTML-file","text":"","category":"section"},{"location":"pages/generate_html/","page":"Generate HTML","title":"Generate HTML","text":"To generate an HTML table, use the show_table function. Next, we will show how you can customize the style and formatting of such a table.","category":"page"},{"location":"pages/generate_html/","page":"Generate HTML","title":"Generate HTML","text":"TableView.show_table","category":"page"},{"location":"pages/generate_html/#TableView.show_table","page":"Generate HTML","title":"TableView.show_table","text":"show_table(table::NTuple; kw...)\n\nGenerate html file based on AgGrid. The table passed to the function must be a NTuple whose elements are NamedTuple objects. Thus, each element of the table will represent its row.\n\nKeyword arguments\n\ncolumn_settings::Dict = Dict(): Configuration for table filters. There you can specify following settings:\nColumn names as a string key and their parameters using another dictionary, which may contain the following pairs:\n\"filter\" => ...: This parameter specifies how the current column should be filtered.\n\"text\": Filter by text using list of values.\n\"number\": Filter by number using range of values.\n\"date\": Filter by date using range of values.\n\"formatter\" => Dict(...): Here you can specify the desired formatting style of the columns.\n\"short\" => true: Enables short form of the large numbers, like 4K (4,000) or 23M (23,000,000). By deafult is false.\n\"style\" => ...: Pre-built styles for displaying numeric values.\n\"decimal\": Default, plain number formatting.\n\"currency\": Displays numeric values with corresponding currency symbol. Default used \"USD\" currency symbol, but you can change it by specifying a different currency \"currency\" => ... like \"EUR\", \"CNY\", etc. See the Current currency & funds code list.\n\"percent\": Turn numeric values from interval [0.0, 1.0] to 0-100% percents.\n\"minimumFractionDigits\" => ...: Specifies the minimum number of decimal places to display. Default is 0.\n\"maximumFractionDigits\" => ...: Specifies the maximum number of decimal places to display. Default is 3.\n\"separator\" => true: Enables grouping separators, such as thousands separators or thousand/lakh/crore separators.\n\"style\" => Dict(...): Here, you can specify columns style\n\"text-align\" => ...: Specifies the horizontal alignment of text in cell. Can be \"left\", \"right\" or \"center\".\n\"color\" => ...: Change color of the text in cells. May be specifying by names of color (\"red\", \"blue\", etc.), hex codes (\"#FFFFEE\", \"#3d85c6\", etc.) or RGB values (\"rgb(230, 230, 250)\", \"rgb(65, 10, 178)\", etc.).\n\"background\" => ...: Setting up the text background color.\n\"equals\" => ...: Enables highlighting of the specified numeric value by color.\n\"threshold\" => ...: Enables a separating border for highlight values that are greater or less than it. Colors of these values must be specified by \"colorUp\" or/and \"ColorDown\" parameters.\n\"colorUp\" => ...: Color of the text that is less than \"threshold\" value.\n\"colorDown\" => ...: Color of the text that is greater than \"threshold\" value.\nHere, you can also specify a pair \"cols\" => true to enable the column filter on the right sidebar.\nresize::Bool = true: Determines whether the column width can be changed by less than 150px.\nout_file::String = \"./index.html\": Output file name.\n\nExamples\n\njulia> data = ((a = 0, b = 1),(a = 1, b = 35));\n\njulia> settings = Dict(\"a\" => Dict(\"filter\" => \"number\"));\n\njulia> TableView.showTable(data, column_settings=settings)\n\"./index.html\"\n\n\n\n\n\n","category":"function"},{"location":"pages/generate_html/#Extended-examples","page":"Generate HTML","title":"Extended examples","text":"","category":"section"},{"location":"pages/generate_html/#Filter-settings","page":"Generate HTML","title":"Filter settings","text":"","category":"section"},{"location":"pages/generate_html/","page":"Generate HTML","title":"Generate HTML","text":"using TableView #hide\nheaders = (:text_col, :number_col, :date_col)\ntable = (\n    NamedTuple{headers}((\"a\", 1, \"2024-01-01T00:00:00\")),\n    NamedTuple{headers}((\"b\", 2, \"2024-02-01T00:00:00\")),\n    NamedTuple{headers}((\"c\", 3, \"2024-03-01T00:00:00\")),\n)\n\nsettings = Dict(\n    \"text_col\" => Dict(\n        \"filter\" => \"text\"\n    ),\n    \"number_col\" => Dict(\n        \"filter\" => \"number\"\n    ),\n    \"date_col\" => Dict(\n        \"filter\" => \"date\"\n    )\n)\n\nshow_table(table, column_settings = settings, resize=true, out_file=\"./filter_example.html\")","category":"page"},{"location":"pages/generate_html/","page":"Generate HTML","title":"Generate HTML","text":"    <iframe src=\"filter_example.html\" style=\"height:400px;width:100%;\"></iframe>","category":"page"},{"location":"pages/generate_html/#Formatter-settings","page":"Generate HTML","title":"Formatter settings","text":"","category":"section"},{"location":"pages/generate_html/","page":"Generate HTML","title":"Generate HTML","text":"using TableView #hide\nheaders = (:default_col, :short_col, :decimal_col, :usd_col, :eur_col, :percent_col, :separator_col)\ntable = (\n    NamedTuple{headers}((1.0e6, 1.0e6, 1.0e6, 1.0e6, 1.0e6, 1.0e6, 1.0e6)),\n    NamedTuple{headers}((1.0e3, 1.0e3, 1.0e3, 1.0e3, 1.0e3, 1.0e3, 1.0e3)),\n    NamedTuple{headers}((1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)),\n    NamedTuple{headers}((1.0e-2, 1.0e-2, 1.0e-2, 1.0e-2, 1.0e-2, 1.0e-2, 1.0e-2)),\n)\n\nsettings = Dict(\n    \"short_col\" => Dict(\n        \"formatter\" => Dict(\n            \"short\" => true,\n        )\n    ),\n    \"decimal_col\" => Dict(\n        \"formatter\" => Dict(\n            \"style\" => \"decimal\",\n        )\n    ),\n    \"usd_col\" => Dict(\n        \"formatter\" => Dict(\n            \"style\" => \"currency\",\n            \"currency\" => \"USD\",\n        )\n    ),\n    \"eur_col\" => Dict(\n        \"formatter\" => Dict(\n            \"style\" => \"currency\",\n            \"currency\" => \"EUR\",\n        )\n    ),\n    \"percent_col\" => Dict(\n        \"formatter\" => Dict(\n            \"style\" => \"percent\",\n        )\n    ),\n    \"separator_col\" => Dict(\n        \"formatter\" => Dict(\n            \"separator\" => true,\n        )\n    ),\n)\n\nshow_table(table, column_settings = settings, resize=false, out_file=\"./formatter_example.html\")","category":"page"},{"location":"pages/generate_html/","page":"Generate HTML","title":"Generate HTML","text":"    <iframe src=\"formatter_example.html\" style=\"height:250px;width:100%;\"></iframe>","category":"page"},{"location":"pages/generate_html/#Style-settings","page":"Generate HTML","title":"Style settings","text":"","category":"section"},{"location":"pages/generate_html/","page":"Generate HTML","title":"Generate HTML","text":"using TableView #hide\nheaders = (:color_col, :equals_col, :threshold_col)\ntable = (\n    NamedTuple{headers}((1, 1, 1)),\n    NamedTuple{headers}((2, 2, 2)),\n    NamedTuple{headers}((3, 3, 3)),\n    NamedTuple{headers}((4, 4, 4)),\n    NamedTuple{headers}((5, 5, 5)),\n)\n\nsettings = Dict(\n    \"color_col\" => Dict(\n        \"style\" => Dict(\n            \"color\" => \"cyan\",\n            \"background\" => \"#34abeb\",\n            \"text-align\" => \"left\",\n        )\n    ),\n    \"equals_col\" => Dict(\n        \"style\" => Dict(\n            \"color\" => \"rgb(250, 100, 100)\",\n            \"equals\" => 3,\n            \"text-align\" => \"center\",\n        )\n    ),\n    \"threshold_col\" => Dict(\n        \"style\" => Dict(\n            \"threshold\" => 3.0,\n            \"colorUp\" =>  \"green\",\n            \"colorDown\" => \"red\",\n        )\n    ),\n)\n\nshow_table(table, column_settings = settings, resize=false, out_file=\"./style_example.html\")","category":"page"},{"location":"pages/generate_html/","page":"Generate HTML","title":"Generate HTML","text":"    <iframe src=\"style_example.html\" style=\"height:265px;width:100%;\"></iframe>","category":"page"},{"location":"#TableView.jl","page":"Home","title":"TableView.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TableView is a Julia package that provides functionality for visualization table data throw generating an HTML file based on AgGrid. You can flexibly customize the style and filtering of your data.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install TableView, simply use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add TableView","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A simple example of a table with cryptocurrency data:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TableView\n\n# Let's first declare the column 'headers' and 'cryptocurrency' row values\nheaders = (:Name, :Price, Symbol(\"1h\"), Symbol(\"24h\"), Symbol(\"7d\"), Symbol(\"Market cap\"), Symbol(\"Volume(24h)\"))\ncryptocurrency = (\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/1.png  width=auto height=12> BTC\",\n        51_704.17, 0.0011, -0.0088, 0.0748, 1_015_017_701_069, 19_853_081_339,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/1027.png  width=auto height=12> ETH\",\n        2_797.54, -0.0009, 0.0181, 0.1140, 336_167_174_675, 18_875_589_553,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/825.png  width=auto height=12> USDT\",\n        1.00, 0.0001, 0.0001, -0.0001, 97_687_504_632, 46_870_650_622,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/1839.png  width=auto height=12> BNB\",\n        353.33, 0.0002, 0.0018, 0.0994, 52_838_510_510, 1_006_060_987,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/5426.png  width=auto height=12> SOL\",\n        111.63, 0.0022, 0.0436, 0.0209, 49_199_185_486, 1_376_798_775,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/52.png  width=auto height=12> XRP\",\n        0.5567, -0.0017, 0.0156, 0.0513, 30_372_867_543, 802_166_044,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png  width=auto height=12> USDC\",\n        1.00, 0.0001, -0.0003, -0.0002, 28_093_824_870, 3_967_216_040,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/2010.png  width=auto height=12> ADA\",\n        0.6255, -0.0064, 0.0794, 0.1420, 22_180_294_747, 735_219_506,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/5805.png  width=auto height=12> AVAX\",\n        40.23, 0.0039, 0.0304, -0.0057, 14_786_919_682, 441_694_819,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/74.png  width=auto height=12> DOGE\",\n        0.08361, 0.0002, 0.0030, 0.0207, 11_966_508_925, 299_147_452,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/1958.png  width=auto height=12> TRX\",\n        0.1352, -0.0003, 0.0066, 0.0871, 11_903_355_674, 246_026_974,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/1975.png  width=auto height=12> LINK\",\n        19.90, 0.0014, -0.0086, -0.0141, 11_684_892_535, 341_667_040,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/6636.png  width=auto height=12> DOT\",\n        7.78, 0.0006, 0.0386, 0.0802, 9_959_472_484, 198_049_180,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/3890.png  width=auto height=12> MATIC\",\n        0.9682, -0.0138, 0.0427, 0.1463, 9_312_126_213, 344_848_552,\n    )),\n    NamedTuple{headers}((\n        \"<img src=https://s2.coinmarketcap.com/static/img/coins/64x64/11419.png  width=auto height=12> TON\",\n        2.27, 0.0065, -0.0286, 0.0822, 7_875_889_558, 33_988_801,\n    )),\n)\n\n# Next we need to specify column settings, such as filtering or formatting and styling\nsettings = Dict(\n    \"Name\" => Dict(\n        \"filter\" => \"text\",\n    ),\n    \"Price\" => Dict(\n        \"filter\" => \"number\",\n        \"formatter\" => Dict(\"style\" => \"currency\", \"currency\" => \"USD\"),\n    ),\n    \"1h\" => Dict(\n        \"formatter\" => Dict(\"style\" => \"percent\"),\n        \"style\" => Dict(\n            \"threshold\" => 0.0,\n            \"colorUp\" => \"#26b521\",\n            \"colorDown\" => \"#ba4022\",\n            \"text-align\" => \"center\",\n        ),\n    ),\n    \"24h\" => Dict(\n        \"formatter\" => Dict(\"style\" => \"percent\"),\n        \"style\" => Dict(\n            \"threshold\" => 0.0,\n            \"colorUp\" => \"#26b521\",\n            \"colorDown\" => \"#ba4022\",\n            \"text-align\" => \"center\",\n        ),\n    ),\n    \"7d\" => Dict(\n        \"formatter\" => Dict(\"style\" => \"percent\"),\n        \"style\" => Dict(\n            \"threshold\" => 0.0,\n            \"colorUp\" => \"#26b521\",\n            \"colorDown\" => \"#ba4022\",\n            \"text-align\" => \"center\",\n        ),\n    ),\n    \"Market cap\" => Dict(\n        \"filter\" => \"number\",\n        \"formatter\" => Dict(\"style\" => \"currency\", \"currency\" => \"USD\"),\n    ),\n    \"Volume(24h)\" => Dict(\n        \"filter\" => \"number\",\n        \"formatter\" => Dict(\"style\" => \"currency\", \"currency\" => \"USD\"),\n    ),\n    \"cols_filter\" => true,\n)\n\n# Finally, let's pass all the values to the function that creates the HTML table\nshow_table(cryptocurrency, column_settings = settings, resize = false, out_file = \"./cryptocurrency_showcase.html\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"    <iframe src=\"cryptocurrency_showcase.html\" style=\"height:700px;width:100%;\"></iframe>","category":"page"},{"location":"pages/aggrid_customization/#AgGrid-customization","page":"AgGrid customization","title":"AgGrid customization","text":"","category":"section"},{"location":"pages/aggrid_customization/","page":"AgGrid customization","title":"AgGrid customization","text":"Custom Tool Panel Components can be included into the grid's SideBar.  Implementing a Tool Panel Component:","category":"page"},{"location":"pages/aggrid_customization/","page":"AgGrid customization","title":"AgGrid customization","text":"    class CustomFilterPanel {\n            eGui;\n            init(params) {\n                this.eGui = document.createElement('div');\n                this.eGui.style.textAlign = 'center';\n            \n                const renderStats = () => {\n                    this.eGui.innerHTML = this.calculateHTML(params, filter, numeric, date)\n                };\n                params.api.addEventListener('gridReady', renderStats);\n            }\n            getGui() {\n                return this.eGui;\n            }\n        \n            setUpdated(value) {\n            this.updated = value;\n            }\n        \n            refresh() {}\n        \n            calculateHTML(params, text, numeric, date) {\n                // generating HTML scripts\n            }\n            calculateFilter(params, numeric, date, height) {\n                // generating HTML scripts filter \n            }\n        \n            calculateDateItem(params, node, height) {\n                // generating HTML scripts filter for date value\n            }\n\n            calculateNumericItem(params, node, height) {\n                // generating HTML scripts filter for numeric value\n            }\n            calculateCols(params, len) {\n                // generating HTML scripts filter for columns\n            };\n\n            calculateParams(params, node, len) {\n                // generating HTML scripts filter for text value\n            };\n        }\n","category":"page"},{"location":"pages/aggrid_customization/","page":"AgGrid customization","title":"AgGrid customization","text":"Registering a Tool Panel component follows the same approach as any other custom components in the grid.  Once the Tool Panel Component is registered with the grid it needs to be included into the SideBar. The following snippet illustrates this:","category":"page"},{"location":"pages/aggrid_customization/","page":"AgGrid customization","title":"AgGrid customization","text":"const gridOptions: {\n    sideBar: {\n        toolPanels: [\n            {\n                id: 'customStats',\n                labelDefault: 'Custom Stats',\n                labelKey: 'customStats',\n                iconKey: 'custom-stats',\n                toolPanel: CustomFilterPanel,\n                toolPanelParams: {\n                    // can pass any custom params here\n                },\n            }\n        ]\n    }\n    // other grid properties\n}","category":"page"}]
}
